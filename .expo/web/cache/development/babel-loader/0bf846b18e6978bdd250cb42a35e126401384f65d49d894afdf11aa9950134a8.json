{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\";\nimport { useState, useCallback, useEffect } from 'react';\nimport { Text } from \"@rneui/themed\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer, useRoute } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  function restartQuiz() {\n    setScore(0);\n    navigation.navigate(\"Question\", {\n      questionIndex: 0\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Question\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Question\",\n        component: QuestionScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        children: function children(props) {\n          return _jsx(SummaryScreen, _objectSpread(_objectSpread({}, props), {}, {\n            setscore: setScore\n          }));\n        }\n      })]\n    })\n  });\n}\nvar questionSet = [{\n  \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": 0\n}, {\n  \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": [0, 2]\n}, {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\"choice 1\", \"choice 2\"],\n  \"correct\": 1\n}];\nfunction handleNextButton(selectedAnswer, questionIndex, setSelectedAnswer, navigation, score) {\n  if (selectedAnswer !== null) {\n    if (questionIndex === questionSet.length - 1) {\n      navigation.navigate(\"Summary\", {\n        score: score\n      });\n    } else {\n      navigation.navigate(\"Question\", {\n        questionIndex: questionIndex + 1\n      });\n    }\n    setSelectedAnswer(null);\n  }\n}\nfunction QuestionScreen(_ref) {\n  var _route$params;\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedAnswer = _useState2[0],\n    setSelectedAnswer = _useState2[1];\n  var route = useRoute();\n  var questionIndex = ((_route$params = route.params) == null ? void 0 : _route$params.questionIndex) || 0;\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    score = _useState4[0],\n    setScore = _useState4[1];\n  var handleQuestion = useCallback(function (index) {\n    var isCorrect = questionSet[questionIndex].correct === index;\n    if (isCorrect) {\n      setScore(function (prevScore) {\n        return prevScore + 1;\n      });\n    }\n    setSelectedAnswer(index);\n    console.log(score);\n  }, [questionIndex, setScore]);\n  function questionFormat() {\n    if (questionSet[questionIndex].type === \"true-false\") {\n      return _jsx(ButtonGroup, {\n        buttons: [\"true\", \"false\"],\n        onPress: handleQuestion,\n        selectedIndex: selectedAnswer,\n        testID: \"choices\"\n      });\n    } else if (questionSet[questionIndex].type === \"multiple-choice\") {\n      return _jsx(ButtonGroup, {\n        style: [styles.container],\n        buttons: questionSet[questionIndex].choices,\n        selectedIndex: selectedAnswer,\n        onPress: handleQuestion,\n        testID: \"choices\"\n      });\n    } else if (questionSet[questionIndex].type === \"multiple-answer\") {\n      return _jsx(ButtonGroup, {\n        buttons: questionSet[questionIndex].choices,\n        testID: \"choices\",\n        onPress: handleQuestion,\n        selectedIndexes: selectedAnswer !== null ? [selectedAnswer] : [],\n        selectMultiple: \"true\"\n      });\n    }\n  }\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsx(Text, {\n      children: questionSet[questionIndex].prompt\n    }), questionFormat(), _jsx(Button, {\n      title: \"Next Question\",\n      onPress: function onPress() {\n        return handleNextButton(selectedAnswer, questionIndex, setSelectedAnswer, navigation);\n      },\n      disabled: selectedAnswer === null,\n      testID: \"next-question\"\n    })]\n  });\n}\nfunction SummaryScreen(_ref2) {\n  var navigation = _ref2.navigation,\n    route = _ref2.route;\n  var scoreValue = route.params.score;\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsxs(Text, {\n      children: [\"You got \", scoreValue, \" out of \", questionSet.length, \" correct\"]\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return restartQuiz;\n      },\n      children: \"Restart\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","FontAwesome","Font","useState","useCallback","useEffect","Text","FlatList","Image","Button","ButtonGroup","Input","NavigationContainer","useRoute","createNativeStackNavigator","AsyncStorage","jsx","_jsx","jsxs","_jsxs","Stack","App","restartQuiz","setScore","navigation","navigate","questionIndex","children","Navigator","initialRouteName","Screen","name","component","QuestionScreen","props","SummaryScreen","_objectSpread","setscore","questionSet","handleNextButton","selectedAnswer","setSelectedAnswer","score","length","_ref","_route$params","_useState","_useState2","_slicedToArray","route","params","_useState3","_useState4","handleQuestion","index","isCorrect","correct","prevScore","console","log","questionFormat","type","buttons","onPress","selectedIndex","testID","style","styles","container","choices","selectedIndexes","selectMultiple","prompt","title","disabled","_ref2","scoreValue","create","flex","backgroundColor","alignItems","justifyContent","fontSize","image","aspectRatio","width","horizontal","flexDirection","padding","button"],"sources":["C:/Users/firet/Documents/dig4639-s23-main-sydsedloff/unit2/lab10/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\"\nimport { useState, useCallback, useEffect } from 'react';\nimport {Text} from \"@rneui/themed\"\nimport { FlatList, Image } from 'react-native'\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer, useRoute } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  \n  function restartQuiz() {\n  setScore(0);\n  navigation.navigate(\"Question\", { questionIndex: 0 });\n}\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Question\">\n        <Stack.Screen name=\"Question\" component={QuestionScreen} />\n        <Stack.Screen name=\"Summary\">\n          {(props) => (\n            <SummaryScreen {...props} setscore={setScore} />\n          )}\n        </Stack.Screen>\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nlet questionSet = [\n  {\n    \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": 0\n},\n  {\n    \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": [0,2]\n},\n  {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n  ],\n  \"correct\": 1\n},\n]\n\nfunction handleNextButton(selectedAnswer, questionIndex, setSelectedAnswer, navigation, score){\n  if (selectedAnswer !== null) {\n    if (questionIndex === questionSet.length - 1){\n      navigation.navigate(\"Summary\", {score: score})\n    }else {\n    navigation.navigate(\"Question\", {questionIndex: questionIndex +1})\n    \n  }\n  setSelectedAnswer(null)\n}\n}\n\n\n\n\nfunction QuestionScreen({navigation}){\n  // const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const route = useRoute()\n  const questionIndex = route.params?.questionIndex || 0;\n  const [score, setScore] = useState(0);\n\n  const handleQuestion = useCallback(\n  (index) => {\n    const isCorrect = questionSet[questionIndex].correct === index;\n    if (isCorrect) {\n      setScore((prevScore) => prevScore + 1);\n    }\n    setSelectedAnswer(index);\n    console.log(score)\n  },\n  [questionIndex, setScore]\n);\n\n  function questionFormat(){\n    if (questionSet[questionIndex].type === \"true-false\"){\n      return (\n        <ButtonGroup\n        buttons = {[\"true\", \"false\"]}\n        onPress= {handleQuestion}\n        selectedIndex={selectedAnswer}\n        testID = \"choices\"\n        ></ButtonGroup>\n      )\n    } else if (questionSet[questionIndex].type === \"multiple-choice\"){\n      return(\n       <ButtonGroup\n      style={[styles.container]}\n      buttons={questionSet[questionIndex].choices}\n      selectedIndex={selectedAnswer}\n      onPress= {handleQuestion}\n      testID=\"choices\" \n      ></ButtonGroup>\n      )\n    }else if (questionSet[questionIndex].type === \"multiple-answer\") {\n      return(\n        <ButtonGroup\n        buttons={questionSet[questionIndex].choices}\n        testID=\"choices\"\n        onPress= {handleQuestion}\n        selectedIndexes={selectedAnswer !== null ? [selectedAnswer] : []}\n        selectMultiple=\"true\">\n             \n        </ButtonGroup>\n      )\n    }\n      \n  }\n return (\n    <View style={[styles.container]}>\n      <Text>{questionSet[questionIndex].prompt}</Text>\n      {questionFormat()}\n      <Button\n        title=\"Next Question\"\n        onPress={() => handleNextButton(selectedAnswer, questionIndex, setSelectedAnswer, navigation)}\n        disabled={selectedAnswer === null}\n        testID=\"next-question\"\n      />\n    </View>\n)\n}\n\nfunction SummaryScreen({navigation, route}) {\n  const scoreValue = route.params.score\n  //show how many questions correct\n  \n  return (\n    <View style={[styles.container]}>\n    <Text>You got {scoreValue} out of {questionSet.length} correct</Text>\n    <Button onPress={() => restartQuiz}>Restart</Button>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}