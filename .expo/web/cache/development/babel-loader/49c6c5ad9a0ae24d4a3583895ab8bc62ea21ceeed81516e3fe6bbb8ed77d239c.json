{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\";\nimport { useState, useCallback, useEffect } from 'react';\nimport { CheckBox, Text } from \"@rneui/themed\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref3 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar initTasks = [{\n  description: \"Task 1\",\n  completed: true,\n  key: 1\n}, {\n  description: \"Task 2\",\n  completed: true,\n  key: 2\n}];\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Question\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Question\",\n        component: QuestionScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen\n      })]\n    })\n  });\n}\nvar questionSet = [{\n  \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": 0\n}, {\n  \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": [0, 2]\n}, {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\"choice 1\", \"choice 2\"],\n  \"correct\": 1\n}];\nfunction QuestionScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestion = _useState2[0],\n    setCurrenQuestion = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedAnswer = _useState4[0],\n    setSelectedAnswer = _useState4[1];\n  var questionIndex = route.params.questionIndex;\n  function handleNextQuestion() {\n    navigation.navigate(\"Question\", {\n      questionIndex: questionIndex + 1\n    });\n  }\n  function questionFormat() {\n    if (questionSet === \"true-false\") {\n      return _jsx(ButtonGroup, {\n        buttons: [\"true\", \"false\"],\n        onPress: handleUserAnswer,\n        testID: \"choices\"\n      });\n    } else if (questionSet === \"multiple-choice\") {\n      _jsx(ButtonGroup, {\n        style: [styles.container],\n        buttons: questionSet.choices,\n        onPress: handleUserAnswer,\n        testID: \"Choices\"\n      });\n    }\n  }\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsx(Text, {\n      style: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        marginHorizontal: 20,\n        textAlign: 'center'\n      },\n      children: question.prompt\n    }), renderChoices(), _jsx(Button, {\n      title: \"Next Question\",\n      onPress: handleNextQuestion,\n      disabled: selectedAnswer === null,\n      testID: \"next-question\"\n    })]\n  });\n}\nfunction SummaryScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  var myCount;\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"You got \", score, \" out of \", questionSet.length, \" correct\"]\n    }), _jsx(Button, {\n      children: \"Restart\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","FontAwesome","Font","useState","useCallback","useEffect","CheckBox","Text","FlatList","Image","Button","ButtonGroup","Input","NavigationContainer","createNativeStackNavigator","AsyncStorage","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref3","font","loadAsync","_x2","initTasks","description","completed","key","Stack","App","children","Navigator","initialRouteName","Screen","name","component","QuestionScreen","SummaryScreen","questionSet","_ref","navigation","_useState","_useState2","_slicedToArray","currentQuestion","setCurrenQuestion","_useState3","_useState4","selectedAnswer","setSelectedAnswer","questionIndex","route","params","handleNextQuestion","navigate","questionFormat","buttons","onPress","handleUserAnswer","testID","style","styles","container","choices","fontSize","fontWeight","marginHorizontal","textAlign","question","prompt","renderChoices","title","disabled","_ref2","myCount","score","length","create","flex","backgroundColor","alignItems","justifyContent","image","aspectRatio","width","horizontal","flexDirection","padding","button"],"sources":["C:/Users/firet/Documents/dig4639-s23-main-sydsedloff/unit2/lab10/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\"\nimport { useState, useCallback, useEffect } from 'react';\nimport {CheckBox, Text} from \"@rneui/themed\"\nimport { FlatList, Image } from 'react-native'\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nasync function cacheFonts(fonts){\n  return fonts.map(async (font) => await Font.loadAsync(font))\n}\nlet initTasks = [\n  {description: \"Task 1\", completed: true, key: 1},\n  {description: \"Task 2\", completed: true, key: 2}\n]\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Question\">\n        {/* <Stack.Screen name=\"Home\" component={HomePage} /> */}\n        <Stack.Screen name=\"Question\" component={QuestionScreen} />\n        <Stack.Screen name=\"Summary\" component={SummaryScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n/*\n\n*/\nlet questionSet = [\n  {\n    \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": 0\n},\n  {\n    \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": [0,2]\n},\n  {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n  ],\n  \"correct\": 1\n},\n]\n\n// function HomePage ({navigation}){\n//   return(\n//     <Button>Start your quiz</Button>\n//   )\n// }\n\n/*if prompt.type == multiple-answer\n  then checkbox \n  else radio button\n*/\nfunction QuestionScreen({navigation}){\n  const [currentQuestion, setCurrenQuestion] = useState(0)\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\")\n  const {questionIndex} = route.params\n\n  function handleNextQuestion(){\n    navigation.navigate(\"Question\", {questionIndex: questionIndex +1})\n  }\n\n  function questionFormat(){\n    if (questionSet === \"true-false\"){\n      return (\n        <ButtonGroup\n        buttons = {[\"true\", \"false\"]}\n        onPress= {handleUserAnswer}\n        testID = \"choices\"\n        ></ButtonGroup>\n      )\n    } else if (questionSet === \"multiple-choice\"){\n      <ButtonGroup\n      style={[styles.container]}\n      buttons={questionSet.choices}\n      onPress={handleUserAnswer}\n      testID=\"Choices\"\n      >\n      </ButtonGroup>\n    }\n      \n  }\n return (\n    <View style={[styles.container]}>\n      <Text style={{ fontSize: 24, fontWeight: 'bold', marginHorizontal: 20, textAlign: 'center' }}>{question.prompt}</Text>\n      {renderChoices()}\n      <Button\n        title=\"Next Question\"\n        onPress={handleNextQuestion}\n        disabled={selectedAnswer === null}\n        testID=\"next-question\"\n      />\n    </View>\n)\n}\n\nfunction SummaryScreen({navigation}) {\n  \n  let myCount\n  //show how many questions correct\n  \n  return (\n    <View>\n    <Text>You got {score} out of {questionSet.length} correct</Text>\n    <Button>Restart</Button>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAE5C,OAAOC,WAAW,MAAM,gCAAgC;AACxD,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAAQC,QAAQ,EAAEC,IAAI,QAAO,eAAe;AAAA,OAAAC,QAAA;AAAA,OAAAC,KAAA;AAE5C,SAASC,MAAM,EAAEC,WAAW,EAAEC,KAAK,QAAQ,aAAa;AACxD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,YAAY,MAAM,2CAA2C;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAEtDC,UAAUA,CAAAC,EAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,CAAzB,WAA0BC,KAAK,EAAC;IAC9B,OAAOA,KAAK,CAACC,GAAG;MAAA,IAAAC,KAAA,GAAAH,iBAAA,CAAC,WAAOI,IAAI;QAAA,aAAW3B,IAAI,CAAC4B,SAAS,CAACD,IAAI,CAAC;MAAA;MAAA,iBAAAE,GAAA;QAAA,OAAAH,KAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;EAC9D,CAAC;EAAA,OAAAF,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,IAAIQ,SAAS,GAAG,CACd;EAACC,WAAW,EAAE,QAAQ;EAAEC,SAAS,EAAE,IAAI;EAAEC,GAAG,EAAE;AAAC,CAAC,EAChD;EAACF,WAAW,EAAE,QAAQ;EAAEC,SAAS,EAAE,IAAI;EAAEC,GAAG,EAAE;AAAC,CAAC,CACjD;AAED,IAAMC,KAAK,GAAGtB,0BAA0B,EAAE;AAE1C,eAAe,SAASuB,GAAGA,CAAA,EAAG;EAC5B,OACEpB,IAAA,CAACJ,mBAAmB;IAAAyB,QAAA,EAClBnB,KAAA,CAACiB,KAAK,CAACG,SAAS;MAACC,gBAAgB,EAAC,UAAU;MAAAF,QAAA,GAE1CrB,IAAA,CAACmB,KAAK,CAACK,MAAM;QAACC,IAAI,EAAC,UAAU;QAACC,SAAS,EAAEC;MAAe,EAAG,EAC3D3B,IAAA,CAACmB,KAAK,CAACK,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAEE;MAAc,EAAG;IAAA;EACzC,EACE;AAE1B;AAIA,IAAIC,WAAW,GAAG,CAChB;EACE,QAAQ,EAAE,yBAAyB;EACrC,MAAM,EAAE,iBAAiB;EACzB,SAAS,EAAE,CACT,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,CACX;EACD,SAAS,EAAE;AACb,CAAC,EACC;EACE,QAAQ,EAAE,8BAA8B;EAC1C,MAAM,EAAE,iBAAiB;EACzB,SAAS,EAAE,CACT,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,CACX;EACD,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC;AACjB,CAAC,EACC;EACA,QAAQ,EAAE,+BAA+B;EACzC,MAAM,EAAE,YAAY;EACpB,SAAS,EAAE,CACT,UAAU,EACV,UAAU,CACX;EACD,SAAS,EAAE;AACb,CAAC,CACA;AAYD,SAASF,cAAcA,CAAAG,IAAA,EAAc;EAAA,IAAZC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACjC,IAAAC,SAAA,GAA6C9C,QAAQ,CAAC,CAAC,CAAC;IAAA+C,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjDG,eAAe,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EACzC,IAAAI,UAAA,GAA4CnD,QAAQ,CAAC,EAAE,CAAC;IAAAoD,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAOG,aAAa,GAAIC,KAAK,CAACC,MAAM,CAA7BF,aAAa;EAEpB,SAASG,kBAAkBA,CAAA,EAAE;IAC3Bb,UAAU,CAACc,QAAQ,CAAC,UAAU,EAAE;MAACJ,aAAa,EAAEA,aAAa,GAAE;IAAC,CAAC,CAAC;EACpE;EAEA,SAASK,cAAcA,CAAA,EAAE;IACvB,IAAIjB,WAAW,KAAK,YAAY,EAAC;MAC/B,OACE7B,IAAA,CAACN,WAAW;QACZqD,OAAO,EAAI,CAAC,MAAM,EAAE,OAAO,CAAE;QAC7BC,OAAO,EAAGC,gBAAiB;QAC3BC,MAAM,EAAG;MAAS,EACH;IAEnB,CAAC,MAAM,IAAIrB,WAAW,KAAK,iBAAiB,EAAC;MAC3C7B,IAAA,CAACN,WAAW;QACZyD,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,CAAE;QAC1BN,OAAO,EAAElB,WAAW,CAACyB,OAAQ;QAC7BN,OAAO,EAAEC,gBAAiB;QAC1BC,MAAM,EAAC;MAAS,EAEF;IAChB;EAEF;EACD,OACGhD,KAAA,CAACnB,IAAI;IAACoE,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,CAAE;IAAAhC,QAAA,GAC9BrB,IAAA,CAACV,IAAI;MAAC6D,KAAK,EAAE;QAAEI,QAAQ,EAAE,EAAE;QAAEC,UAAU,EAAE,MAAM;QAAEC,gBAAgB,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAArC,QAAA,EAAEsC,QAAQ,CAACC;IAAM,EAAQ,EACrHC,aAAa,EAAE,EAChB7D,IAAA,CAACP,MAAM;MACLqE,KAAK,EAAC,eAAe;MACrBd,OAAO,EAAEJ,kBAAmB;MAC5BmB,QAAQ,EAAExB,cAAc,KAAK,IAAK;MAClCW,MAAM,EAAC;IAAe,EACtB;EAAA,EACG;AAEX;AAEA,SAAStB,aAAaA,CAAAoC,KAAA,EAAe;EAAA,IAAbjC,UAAU,GAAAiC,KAAA,CAAVjC,UAAU;EAEhC,IAAIkC,OAAO;EAGX,OACE/D,KAAA,CAACnB,IAAI;IAAAsC,QAAA,GACLnB,KAAA,CAACZ,IAAI;MAAA+B,QAAA,GAAC,UAAQ,EAAC6C,KAAK,EAAC,UAAQ,EAACrC,WAAW,CAACsC,MAAM,EAAC,UAAQ;IAAA,EAAO,EAChEnE,IAAA,CAACP,MAAM;MAAA4B,QAAA,EAAC;IAAO,EAAS;EAAA,EACjB;AAEX;AAGA,IAAM+B,MAAM,GAAGtE,UAAU,CAACsF,MAAM,CAAC;EAC/Bf,SAAS,EAAE;IACTgB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBjB,QAAQ,EAAE;EACZ,CAAC;EACDkB,KAAK,EAAE;IACLJ,IAAI,EAAE,CAAC;IACPK,WAAW,EAAE,CAAC;IACdC,KAAK,EAAE,KAAK;IACZL,eAAe,EAAE;EACnB,CAAC;EACDM,UAAU,EAAE;IACVC,aAAa,EAAE,KAAK;IACpBL,cAAc,EAAE,cAAc;IAC9BM,OAAO,EAAE,EAAE;IACXvB,QAAQ,EAAE;EACZ,CAAC;EACDwB,MAAM,EAAE;IACNR,UAAU,EAAE,QAAQ;IACpBD,eAAe,EAAE,SAAS;IAC1BQ,OAAO,EAAE;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}