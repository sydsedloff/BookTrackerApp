{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\";\nimport { useState, useCallback, useEffect } from 'react';\nimport { Text } from \"@rneui/themed\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer, useRoute } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Question\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Question\",\n        component: QuestionScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen\n      })]\n    })\n  });\n}\nvar questionSet = [{\n  \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": 0\n}, {\n  \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\"choice 1\", \"choice 2\", \"choice 3\", \"choice 4\"],\n  \"correct\": [0, 2]\n}, {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\"choice 1\", \"choice 2\"],\n  \"correct\": 1\n}];\nfunction handleNextButton(selectedAnswer, questionIndex) {\n  if (selectedAnswer !== null) {\n    navigation.navigate(\"Question\", {\n      questionIndex: questionIndex + 1\n    });\n  }\n}\nfunction restartQuiz() {\n  setScore(0);\n  navigation.navigate(\"Question\", {\n    questionIndex: 0\n  });\n}\nfunction QuestionScreen(_ref) {\n  var _route$params;\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedAnswer = _useState2[0],\n    setSelectedAnswer = _useState2[1];\n  var route = useRoute();\n  var questionIndex = ((_route$params = route.params) == null ? void 0 : _route$params.questionIndex) || 0;\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    score = _useState4[0],\n    setScore = _useState4[1];\n  function handleQuestion(index) {\n    var isCorrect = questionSet[questionIndex].correct === index;\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    setSelectedAnswer(index);\n    console.log(score);\n  }\n  function questionFormat() {\n    if (questionSet[questionIndex].type === \"true-false\") {\n      return _jsx(ButtonGroup, {\n        buttons: [\"true\", \"false\"],\n        onPress: handleQuestion,\n        selectedIndex: selectedAnswer,\n        testID: \"choices\"\n      });\n    } else if (questionSet[questionIndex].type === \"multiple-choice\") {\n      return _jsx(ButtonGroup, {\n        style: [styles.container],\n        buttons: questionSet[questionIndex].choices,\n        selectedIndex: selectedAnswer,\n        onPress: handleQuestion,\n        testID: \"choices\"\n      });\n    } else if (questionSet[questionIndex].type === \"multiple-answer\") {\n      return _jsx(ButtonGroup, {\n        buttons: questionSet[questionIndex].choices,\n        testID: \"choices\",\n        onPress: handleQuestion,\n        selectedIndexes: selectedAnswer !== null ? [selectedAnswer] : [],\n        selectMultiple: \"true\"\n      });\n    }\n  }\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsx(Text, {\n      children: questionSet[questionIndex].prompt\n    }), questionFormat(), _jsx(Button, {\n      title: \"Next Question\",\n      onPress: handleNextButton(),\n      disabled: selectedAnswer === null,\n      testID: \"next-question\"\n    })]\n  });\n}\nfunction SummaryScreen(_ref2) {\n  var navigation = _ref2.navigation,\n    score = _ref2.score;\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"You got \", score, \" out of \", questionSet.length, \" correct\"]\n    }), _jsx(Button, {\n      onPress: restartQuiz,\n      children: \"Restart\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","FontAwesome","Font","useState","useCallback","useEffect","Text","FlatList","Image","Button","ButtonGroup","Input","NavigationContainer","useRoute","createNativeStackNavigator","AsyncStorage","jsx","_jsx","jsxs","_jsxs","Stack","App","children","Navigator","initialRouteName","Screen","name","component","QuestionScreen","SummaryScreen","questionSet","handleNextButton","selectedAnswer","questionIndex","navigation","navigate","restartQuiz","setScore","_ref","_route$params","_useState","_useState2","_slicedToArray","setSelectedAnswer","route","params","_useState3","_useState4","score","handleQuestion","index","isCorrect","correct","console","log","questionFormat","type","buttons","onPress","selectedIndex","testID","style","styles","container","choices","selectedIndexes","selectMultiple","prompt","title","disabled","_ref2","length","create","flex","backgroundColor","alignItems","justifyContent","fontSize","image","aspectRatio","width","horizontal","flexDirection","padding","button"],"sources":["C:/Users/firet/Documents/dig4639-s23-main-sydsedloff/unit2/lab10/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport * as Font from \"expo-font\"\nimport { useState, useCallback, useEffect } from 'react';\nimport {Text} from \"@rneui/themed\"\nimport { FlatList, Image } from 'react-native'\nimport { Button, ButtonGroup, Input } from '@rneui/base';\nimport { NavigationContainer, useRoute } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Question\">\n        <Stack.Screen name=\"Question\" component={QuestionScreen} />\n        <Stack.Screen name=\"Summary\" component={SummaryScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nlet questionSet = [\n  {\n    \"prompt\": \"This is the question...\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": 0\n},\n  {\n    \"prompt\": \"This is another  question...\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n    \"choice 3\",\n    \"choice 4\",\n  ],\n  \"correct\": [0,2]\n},\n  {\n  \"prompt\": \"This is the third question...\",\n  \"type\": \"true-false\",\n  \"choices\": [\n    \"choice 1\",\n    \"choice 2\",\n  ],\n  \"correct\": 1\n},\n]\n\nfunction handleNextButton(selectedAnswer, questionIndex){\n  if (selectedAnswer !== null) {\n    navigation.navigate(\"Question\", {questionIndex: questionIndex +1})\n    // selectedAnswer = null\n  }\n}\n\nfunction restartQuiz() {\n  setScore(0);\n  navigation.navigate(\"Question\", { questionIndex: 0 });\n}\n\nfunction QuestionScreen({navigation}){\n  // const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const route = useRoute()\n  const questionIndex = route.params?.questionIndex || 0;\n  const [score, setScore] = useState(0);\n\n  function handleQuestion(index){\n    const isCorrect = questionSet[questionIndex].correct === index;\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    setSelectedAnswer(index)\n    console.log(score)\n  }\n\n  function questionFormat(){\n    if (questionSet[questionIndex].type === \"true-false\"){\n      return (\n        <ButtonGroup\n        buttons = {[\"true\", \"false\"]}\n        onPress= {handleQuestion}\n        selectedIndex={selectedAnswer}\n        testID = \"choices\"\n        ></ButtonGroup>\n      )\n    } else if (questionSet[questionIndex].type === \"multiple-choice\"){\n      return(\n       <ButtonGroup\n      style={[styles.container]}\n      buttons={questionSet[questionIndex].choices}\n      selectedIndex={selectedAnswer}\n      onPress= {handleQuestion}\n      testID=\"choices\" \n      ></ButtonGroup>\n      )\n    }else if (questionSet[questionIndex].type === \"multiple-answer\") {\n      return(\n        <ButtonGroup\n        buttons={questionSet[questionIndex].choices}\n        testID=\"choices\"\n        onPress= {handleQuestion}\n        selectedIndexes={selectedAnswer !== null ? [selectedAnswer] : []}\n        selectMultiple=\"true\">\n             \n        </ButtonGroup>\n      )\n    }\n      \n  }\n return (\n    <View style={[styles.container]}>\n      <Text>{questionSet[questionIndex].prompt}</Text>\n      {questionFormat()}\n      <Button\n        title=\"Next Question\"\n        onPress={handleNextButton()}\n        disabled={selectedAnswer === null}\n        testID=\"next-question\"\n      />\n    </View>\n)\n}\n\nfunction SummaryScreen({navigation, score}) {\n  \n  //show how many questions correct\n  \n  return (\n    <View>\n    <Text>You got {score} out of {questionSet.length} correct</Text>\n    <Button onPress={restartQuiz}>Restart</Button>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: \"50px\"\n  },\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: \"50%\",\n    backgroundColor: \"blue\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10,\n    fontSize: \"50px\"\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    padding: 10\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}